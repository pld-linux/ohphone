--- ohphone/xlibvid.h.orig	2002-06-27 04:17:40.000000000 +0200
+++ ohphone/xlibvid.h	2003-07-13 20:24:43.000000000 +0200
@@ -80,7 +80,7 @@
 #define __XLIBVID_H
 
 #include <ptlib.h>
-#include <videoio.h>
+#include <ptlib/videoio.h>
 
 /*Each of the publically accessible components in GenericXlibVideoDevice
  *are protected by the mutex videoMutex. 
@@ -105,9 +105,9 @@
 
 /**Core class for handling requests to the X server.
   */
-class GenericXlibVideoDevice : public H323VideoDevice
+class GenericXlibVideoDevice : public PVideoOutputDevice
 {
-  PCLASSINFO(GenericXlibVideoDevice, H323VideoDevice);
+  PCLASSINFO(GenericXlibVideoDevice, PVideoOutputDevice);
 
  public:
   /**Constructor. Does not make a window. Initializes all variables;
@@ -126,6 +126,13 @@
      class is open.*/
   BOOL IsOpen();
   
+  /* override abstract */
+  BOOL Open(const PString &str, int n = 1) { return TRUE; }
+  PStringList GetDeviceNames() const { return PStringList(PString("SDL")); }
+  PINDEX GetMaxFrameBytes() { return 2048*1536*3*2; }
+  BOOL SetFrameData(unsigned x, unsigned y, unsigned width, unsigned height, const BYTE *data, BOOL endFrame = TRUE) { return TRUE; }
+  BOOL EndFrame() { return TRUE; }
+
   /**Take a YUV420P format image, render it on the existing window. 
      If the window is not present, there is no rendering. Except,
      if doing picture in picture, and is local image, and receive
@@ -154,7 +161,7 @@
      { forceDepth = d; }
 
   protected:
-    // overrides from H323VideoDevice
+    // overrides from PVideoDevice
     virtual  BOOL WriteLineSegment(int x, int y, unsigned len, const BYTE * data)
        { return TRUE; }
 
--- ohphone/main.cxx.orig	2003-03-05 21:29:21.000000000 +0100
+++ ohphone/main.cxx	2003-07-13 19:59:36.000000000 +0200
@@ -434,7 +434,7 @@
 #include "mscodecs.h"
 #include <speexcodec.h>
 #include "h261codec.h"
-#include "videoio.h"
+#include <ptlib/videoio.h>
 #include "h323pdu.h"
 #include "g726codec.h"
 //#include "h323t120.h"
@@ -2237,7 +2237,7 @@
     // Dump video to PPM files
     //can have two ppm video devices. 99==local    00==received.
     if (videoReceiveDevice *= "ppm")
-      device = new PPMVideoOutputDevice(isEncoding? 99:0);
+      device = new PVideoOutputDevicePPM();
   }
 #ifdef HAS_VGALIB //vgalib can only do receive video device.
   if (!isEncoding) {
@@ -2251,7 +2251,7 @@
 #endif
   // Dump video to nowhere
   if ((videoReceiveDevice *= "null") || (isEncoding&&(!videoLocal)))
-    device = new NullVideoOutputDevice();
+    device = new PVideoOutputDeviceNULL();
 
   if (device == NULL)
     PError << "unknown video output device \"" << videoReceiveDevice << "\"" << endl;
--- ohphone/sdlvid.h.orig	2002-12-03 22:45:05.000000000 +0100
+++ ohphone/sdlvid.h	2003-07-13 20:24:00.000000000 +0200
@@ -49,7 +49,7 @@
 #define _OhPhone_SDL_H
 
 #include <ptlib.h>
-#include <videoio.h>
+#include <ptlib/videoio.h>
 
 #include <SDL.h>
 
@@ -162,9 +162,9 @@
 /**Display data to the SDL screen.
   */
 
-class SDLVideoDevice : public H323VideoDevice
+class SDLVideoDevice : public PVideoOutputDevice
 {
-  PCLASSINFO(SDLVideoDevice, H323VideoDevice);
+  PCLASSINFO(SDLVideoDevice, PVideoOutputDevice);
 
  public:
   /**Constructor. Does not make a window.
@@ -185,6 +185,13 @@
      class is open.*/
   BOOL IsOpen();
 
+  /* override abstract */
+  BOOL Open(const PString &str, int n = 1) { return TRUE; }
+  PStringList GetDeviceNames() const { return PStringList(PString("SDL")); }
+  PINDEX GetMaxFrameBytes() { return 2048*1536*3*2; }
+  BOOL SetFrameData(unsigned x, unsigned y, unsigned width, unsigned height, const BYTE *data, BOOL endFrame = TRUE) { return TRUE; }
+  BOOL EndFrame() { return TRUE; }
+
   /**Take a YUV420P format image, render it on the existing window. 
      If the window is not present, there is no rendering.
   */
@@ -210,7 +217,7 @@
 
 
   protected:
-    // overrides from H323VideoDevice
+    // overrides from PVideoDevice
     BOOL WriteLineSegment(int /*x*/, int /*y*/, unsigned /*len*/, const BYTE * /*data*/)
        { return TRUE; }
 
